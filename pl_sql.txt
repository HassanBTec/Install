--
SET echo off;
SET verify off;
SET pages 50000;
SET pagesize 50000
SET feedback off;
set headsep off;
SET newpage none;
SET termout off;
SET linesize 900;
SET trimspool on;
SET serveroutput on;

set markup csv on delimi ';' quote off;

-- make sure to run command sed $'s/\t*$/\r/' for CR LF.

spool RSSBEP-24651_25AugData.csv;

alter session set nls_date_format = 'YYYYmmdd';

WITH TM AS
(
  ...
)
SELECT ...;

CASE
  WHEN ...
  WHEN LINE_CD = 'TOTAL_ALL'
    THEN 
        (SELECT COALESCE(MAX(CASE WHEN T1.LINE_CD IN(...) 
          THEN 'INTRNTL' ELSE 'TOTAL_ALL' END), 'TOTAL_ALL')	
          FROM LMTM_LIMITS T1	
          WHERE T1.MAIN_LINE LIKE 'TOTAL_ALL%' AND T1.LINE_CD IN(...)
          AND T1.LIAB_ID = T.LIAB_ID AND T1.RECORD_STAT = 'O')
  ELSE
    ...
  END

spool off;

---------------------------------

SET SERVEROUTPUT ON
---
with tmp (code, description) as
      (select 12, 'Missing Work' from dual union all
       select 14, 'Absent'       from dual union all
       select 22, 'Incomplete'   from dual
      ),
      table1 (c_date, task, code) as
     (select date '2019-05-30', 'Homework', 12 from dual union all
       select date '2019-05-31', 'Labwork' , 14 from dual union all
      select date '2019-05-30', 'Other'   , 22 from dual
     )
   select t.c_date, t.task, t.code, e.description
   from table1 t join tmp e on e.code = t.code;

C_DATE     TASK           CODE DESCRIPTION
---------- -------- ---------- ------------
05/30/2019 Homework         12 Missing Work
05/31/2019 Labwork          14 Absent
05/30/2019 Other            22 Incomplete

---
SPOOL output.out

select count(*) from user_objects where status<>'VALID';

                DECLARE
                v_exist         NUMBER(38) := 0;
                v_updated       NUMBER(38) := 0;
                v_inserted      NUMBER(38) := 0;
                v_amt           FLOAT(126) := 0;
           BEGIN

                begin
                SELECT COUNT(*) INTO v_exist FROM MGTB_ERROR_DETAILS;
                IF (SQL%ROWCOUNT > 0) THEN
                        DBMS_OUTPUT.PUT_LINE('into updating...');
                        ROLLBACK;
                RETURN;
                END IF;
                exception
                when others then
                        DBMS_OUTPUT.PUT_LINE('into updating:'|| TO_CHAR(SQLCODE)||':'||SQLERRM);
                        RAISE;
                end;

                ROLLBACK;

        END;
/
SPOOL OFF
quit;

/	
-------------------------------------------------------------------------

SET SERVEROUTPUT ON;
DECLARE
	CURSOR c_cur IS select table_name from user_tables where table_name like 'ACC%';
	r_type c_cur%ROWTYPE;
    cnt number;

BEGIN
OPEN c_cur;

LOOP
	FETCH c_cur INTO r_type;
	IF c_cur%NOTFOUND
		THEN
		EXIT;
	END IF;
    execute immediate 'select count(1)  from '|| r_type.table_name into cnt;
    IF cnt > 0 and cnt < 6000
        THEN
                dbms_output.put_line('Table : ' || r_type.table_name || '; Row Count : ' || cnt);
    END IF;
    cnt := 0;
END LOOP;
	Dbms_output.put_line('Total rows :'||c_cur%ROWCOUNT);

CLOSE c_cur;

END;
/

-------------------------------------------------------------------------

 with tm(owner, table_name, tablespace_name, num_rows) as
 (
            select a.owner, a.table_name, a.tablespace_name, a.num_rows from all_tables a
 ) 
 select m.owner, m.table_name, m.tablespace_name, m.num_rows, round(m.num_rows, -3), row_number() over (order by m.owner, m.table_name) SEQ 
    from (select t.*, count(distinct round(t.num_rows, -3)) over (partition by t.owner) cnt from 
        tm t
        where 
            t.tablespace_name is not null
            and t.owner <> 'SYS'
            and t.num_rows > 10000
            --and t.acc not in (select distinct acc from tm u where t.id1 = u.id1 and t.id2 is null and u.acc = t.acc and u.acc = u.acc_no)
    ) m
    where cnt > 1;

-- Find value which doesn't exist in other column

    select l.id1, l.id2, l.id3, l.old_acc from tab1 l 
    join tab2 u
    where l.old_acc is not null
    and l.old_acc like '123%' and l.status = 'O'
    and u.status='O'
    group by l.id1, l.id2, l.id3, l.old_acc
    having count(CASE WHEN l.old_acc = u.acc THEN 1 END) = 0;

-- Using functions to join PL/SQL	

create or replace type typ_person
        as object (
          table_name varchar2(30),
          tablespace_name varchar2(30)
        );
/
create or replace type tbl_person
     as table of typ_person;
/
CREATE OR REPLACE function get_person_list
      return tbl_person
    is
      l_people tbl_person;
    begin
      select typ_person (table_name, tablespace_name)
        bulk collect into l_people
        from user_tables;
      return l_people;
  end;
/
DECLARE
    L_COUNT   NUMBER;
    --type tbl_person is table of typ_person;
    --type tbl_person as table of typ_person;
BEGIN
    FOR I IN (
    select count(*) L_COUNT
      from user_tables e
           join table (get_person_list()) p on (p.table_name = e.table_name)
    ) 
    LOOP
        DBMS_OUTPUT.PUT_LINE('Result: ' || I.L_COUNT);
    END LOOP;
END;
/
------------------------------------------------------------------------------------------------

            	--ACCEPT     vPREV_DATE     PROMPT        'Date (exemple 20140701):  ';
                DECLARE
		v_exist 	NUMBER(38) := 0;
		v_updated 	NUMBER(38) := 0;
		v_inserted 	NUMBER(38) := 0;
                v_amt           FLOAT(126) := 0;
                BEGIN

		--sql_query := 'CREATE TABLE JOURNAL AS SELECT * FROM INTEREST_CALC WHERE 1=2';		
		begin
		DELETE FROM JOURNAL;
                IF (SQL%ROWCOUNT > 0) THEN
                	DBMS_OUTPUT.PUT_LINE('into deleting...');
                	ROLLBACK;
                RETURN;
                END IF;
                exception
                when others then
                	DBMS_OUTPUT.PUT_LINE('into deleting:'|| TO_CHAR(SQLCODE)||':'||SQLERRM);
                        RAISE;
                end;  

                FOR I IN    (

                 SELECT t.trans_acc_id, t.trans_value_date, sum(t.trans_amount) sum_amt 
			from trans t where t.trans_acc_id in ( SELECT INT_ACC_ID FROM TMP) and t.trans_value_date like '201503%' group by t.trans_acc_id, t.trans_value_date
                )
                LOOP
                BEGIN
			UPDATE INTEREST_CALC SET INT_AMOUNT = I.SUM_AMT, INT_SYS_DATE = SYSDATE 
				WHERE INT_ACC_ID = I.TRANS_ACC_ID and INT_VALUE_DATE = to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD') and INT_AMOUNT <> I.SUM_AMT;
			IF (SQL%ROWCOUNT > 0) THEN
				v_updated := v_updated + 1;
			END IF;
			IF (SQL%NOTFOUND) THEN
				SELECT COUNT(*) INTO v_exist FROM INTEREST_CALC WHERE INT_ACC_ID = I.TRANS_ACC_ID and INT_VALUE_DATE = to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD');
				IF v_exist <= 0 THEN
					v_inserted := v_inserted + 1;
					INSERT INTO INTEREST_CALC VALUES (I.TRANS_ACC_ID, to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD'), I.SUM_AMT, 0, SYSDATE);
				END IF;
			END IF;
			COMMIT;
			EXCEPTION 
			  WHEN OTHERS THEN
			     DBMS_OUTPUT.PUT_LINE('Exception:'|| TO_CHAR(SQLCODE)||':'||SQLERRM);
			     DBMS_OUTPUT.PUT_LINE('NOK:'||I.TRANS_ACC_ID||':'||','||I.trans_value_date);
			--WHEN NO_DATA_FOUND
			--THEN
                        --WHEN OTHERS THEN NULL;
                END;
                END LOOP;
				DBMS_OUTPUT.PUT_LINE('ROWS UPDATED:'||v_updated);
				DBMS_OUTPUT.PUT_LINE('ROWS INSERTED:'||v_inserted);

		-- CHECK BALANCES OF MARCH
		v_updated := 0;
		FOR I IN (
			SELECT INT_ACC_ID, INT_INITIAL_BAL FROM INTEREST_CALC WHERE INT_ACC_ID IN (SELECT INT_ACC_ID FROM TMP) and INT_VALUE_DATE =to_date('20150301', 'YYYYMMDD') 
		)
		LOOP
		BEGIN
			SELECT (amt1 - amt2) INTO v_amt from (select amount as amt1 from acc_type where account1_id = I.INT_ACC_ID), 
							(select nvl(sum(trans_amount), 0) as amt2 from trans where trans_acc_id = I.INT_ACC_ID and TRANS_DATE >= '20150301');
			SELECT COUNT(*) INTO v_exist FROM INTEREST_CALC WHERE INT_ACC_ID = I.INT_ACC_ID and INT_VALUE_DATE = to_date('20150301', 'YYYYMMDD') and ABS(INT_INITIAL_BAL - v_amt) > 10;
			IF v_exist > 0 THEN
				v_updated := v_updated + 1;
				UPDATE INTEREST_CALC SET INT_INITIAL_BAL = v_amt, INT_SYS_DATE = SYSDATE WHERE INT_ACC_ID = I.INT_ACC_ID and INT_VALUE_DATE = to_date('20150301', 'YYYYMMDD');
			END IF;
			UPDATE INTEREST_CALC SET INT_INITIAL_BAL = 0 WHERE INT_ACC_ID = I.INT_ACC_ID and INT_VALUE_DATE > to_date('20150301', 'YYYYMMDD');
			COMMIT;
		END;
		END LOOP;
				DBMS_OUTPUT.PUT_LINE('BALANCES UPDATED:'||v_updated);
		-- REMOVE PREVIOUS INTEREST AMOUNT
		v_updated := 0;
		FOR I IN    (

                 SELECT t.trans_acc_id, t.trans_value_date, t.trans_amount
                        from trans t where t.trans_acc_id in ( SELECT INT_ACC_ID FROM TMP) and t.trans_channel = 'BAT' and t.trans_code = '198'
			and t.trans_value_date >= '20150401' and t.trans_value_date like '20150%01' and t.trans_sys_date between '20150331' and '20150702' 
                )
                LOOP
                BEGIN
			UPDATE INTEREST_CALC SET INT_AMOUNT = INT_AMOUNT - I.TRANS_AMOUNT, INT_SYS_DATE = SYSDATE 
				WHERE INT_ACC_ID = I.TRANS_ACC_ID and INT_VALUE_DATE = to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD');	
			IF (SQL%ROWCOUNT > 0) THEN
				v_updated := v_updated + 1;
				INSERT INTO JOURNAL VALUES (I.TRANS_ACC_ID, to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD'), I.TRANS_AMOUNT, 0, sysdate);
			END IF;
		END;
		END LOOP;
				COMMIT;
				DBMS_OUTPUT.PUT_LINE('TOTAL RECORDS UPDATED:'||v_updated);

		v_updated := 0;
                FOR I IN    ( 
			SELECT INT_ACC_ID FROM TMP
		)
		LOOP
		BEGIN
			UPDATE AUTOTRAN SET LAST_DATE = '20150228', ATLASTCOMPOUNDDATE = '20150228', NEXT_DATE = '20150331', ATNEXTPAYMENTDATE = '20150331' 
				WHERE FROM_PROD_ID = I.INT_ACC_ID AND TRANS_CODE ='003';
			IF (SQL%ROWCOUNT > 0) THEN
				v_updated := v_updated + 1;
			END IF;
		END;
		END LOOP;
				COMMIT;
				DBMS_OUTPUT.PUT_LINE('TOTAL AUTOTRAN UPDATED:'||v_updated);

                COMMIT;
                END;
                / 
