		SET SERVEROUTPUT ON

            	--ACCEPT     vPREV_DATE     PROMPT        'Date (exemple 20140701):  ';
                DECLARE
		v_exist 	NUMBER(38) := 0;
		v_updated 	NUMBER(38) := 0;
		v_inserted 	NUMBER(38) := 0;
                v_amt           FLOAT(126) := 0;
                BEGIN

		--sql_query := 'CREATE TABLE JOURNAL AS SELECT * FROM INTEREST_CALC WHERE 1=2';		
		begin
		DELETE FROM JOURNAL;
                IF (SQL%ROWCOUNT > 0) THEN
                	DBMS_OUTPUT.PUT_LINE('into deleting...');
                	ROLLBACK;
                RETURN;
                END IF;
                exception
                when others then
                	DBMS_OUTPUT.PUT_LINE('into deleting:'|| TO_CHAR(SQLCODE)||':'||SQLERRM);
                        RAISE;
                end;  

                FOR I IN    (

                 SELECT t.trans_acc_id, t.trans_value_date, sum(t.trans_amount) sum_amt 
			from trans t where t.trans_acc_id in ( SELECT INT_ACC_ID FROM TMP) and t.trans_value_date like '201503%' group by t.trans_acc_id, t.trans_value_date
                )
                LOOP
                BEGIN
			UPDATE INTEREST_CALC SET INT_AMOUNT = I.SUM_AMT, INT_SYS_DATE = SYSDATE 
				WHERE INT_ACC_ID = I.TRANS_ACC_ID and INT_VALUE_DATE = to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD') and INT_AMOUNT <> I.SUM_AMT;
			IF (SQL%ROWCOUNT > 0) THEN
				v_updated := v_updated + 1;
			END IF;
			IF (SQL%NOTFOUND) THEN
				SELECT COUNT(*) INTO v_exist FROM INTEREST_CALC WHERE INT_ACC_ID = I.TRANS_ACC_ID and INT_VALUE_DATE = to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD');
				IF v_exist <= 0 THEN
					v_inserted := v_inserted + 1;
					INSERT INTO INTEREST_CALC VALUES (I.TRANS_ACC_ID, to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD'), I.SUM_AMT, 0, SYSDATE);
				END IF;
			END IF;
			COMMIT;
			EXCEPTION 
			  WHEN OTHERS THEN
			     DBMS_OUTPUT.PUT_LINE('Exception:'|| TO_CHAR(SQLCODE)||':'||SQLERRM);
			     DBMS_OUTPUT.PUT_LINE('NOK:'||I.TRANS_ACC_ID||':'||','||I.trans_value_date);
			--WHEN NO_DATA_FOUND
			--THEN
                        --WHEN OTHERS THEN NULL;
                END;
                END LOOP;
				DBMS_OUTPUT.PUT_LINE('ROWS UPDATED:'||v_updated);
				DBMS_OUTPUT.PUT_LINE('ROWS INSERTED:'||v_inserted);

		-- CHECK BALANCES OF MARCH
		v_updated := 0;
		FOR I IN (
			SELECT INT_ACC_ID, INT_INITIAL_BAL FROM INTEREST_CALC WHERE INT_ACC_ID IN (SELECT INT_ACC_ID FROM TMP) and INT_VALUE_DATE =to_date('20150301', 'YYYYMMDD') 
		)
		LOOP
		BEGIN
			SELECT (amt1 - amt2) INTO v_amt from (select amount as amt1 from acc_type where account1_id = I.INT_ACC_ID), 
							(select nvl(sum(trans_amount), 0) as amt2 from trans where trans_acc_id = I.INT_ACC_ID and TRANS_DATE >= '20150301');
			SELECT COUNT(*) INTO v_exist FROM INTEREST_CALC WHERE INT_ACC_ID = I.INT_ACC_ID and INT_VALUE_DATE = to_date('20150301', 'YYYYMMDD') and ABS(INT_INITIAL_BAL - v_amt) > 10;
			IF v_exist > 0 THEN
				v_updated := v_updated + 1;
				UPDATE INTEREST_CALC SET INT_INITIAL_BAL = v_amt, INT_SYS_DATE = SYSDATE WHERE INT_ACC_ID = I.INT_ACC_ID and INT_VALUE_DATE = to_date('20150301', 'YYYYMMDD');
			END IF;
			UPDATE INTEREST_CALC SET INT_INITIAL_BAL = 0 WHERE INT_ACC_ID = I.INT_ACC_ID and INT_VALUE_DATE > to_date('20150301', 'YYYYMMDD');
			COMMIT;
		END;
		END LOOP;
				DBMS_OUTPUT.PUT_LINE('BALANCES UPDATED:'||v_updated);
		-- REMOVE PREVIOUS INTEREST AMOUNT
		v_updated := 0;
		FOR I IN    (

                 SELECT t.trans_acc_id, t.trans_value_date, t.trans_amount
                        from trans t where t.trans_acc_id in ( SELECT INT_ACC_ID FROM TMP) and t.trans_channel = 'BAT' and t.trans_code = '198'
			and t.trans_value_date >= '20150401' and t.trans_value_date like '20150%01' and t.trans_sys_date between '20150331' and '20150702' 
                )
                LOOP
                BEGIN
			UPDATE INTEREST_CALC SET INT_AMOUNT = INT_AMOUNT - I.TRANS_AMOUNT, INT_SYS_DATE = SYSDATE 
				WHERE INT_ACC_ID = I.TRANS_ACC_ID and INT_VALUE_DATE = to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD');	
			IF (SQL%ROWCOUNT > 0) THEN
				v_updated := v_updated + 1;
				INSERT INTO JOURNAL VALUES (I.TRANS_ACC_ID, to_date(I.TRANS_VALUE_DATE, 'YYYYMMDD'), I.TRANS_AMOUNT, 0, sysdate);
			END IF;
		END;
		END LOOP;
				COMMIT;
				DBMS_OUTPUT.PUT_LINE('TOTAL RECORDS UPDATED:'||v_updated);

		v_updated := 0;
                FOR I IN    ( 
			SELECT INT_ACC_ID FROM TMP
		)
		LOOP
		BEGIN
			UPDATE AUTOTRAN SET LAST_DATE = '20150228', ATLASTCOMPOUNDDATE = '20150228', NEXT_DATE = '20150331', ATNEXTPAYMENTDATE = '20150331' 
				WHERE FROM_PROD_ID = I.INT_ACC_ID AND TRANS_CODE ='003';
			IF (SQL%ROWCOUNT > 0) THEN
				v_updated := v_updated + 1;
			END IF;
		END;
		END LOOP;
				COMMIT;
				DBMS_OUTPUT.PUT_LINE('TOTAL AUTOTRAN UPDATED:'||v_updated);

                COMMIT;
                END;
                / 
